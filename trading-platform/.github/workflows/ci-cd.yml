name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: trading-platform

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [data-ingestion, ai-engine, order-executor]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd trading-platform/services/${{ matrix.service }}
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov black flake8 mypy
    
    - name: Run linting
      run: |
        cd trading-platform/services/${{ matrix.service }}
        black --check .
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking
      run: |
        cd trading-platform/services/${{ matrix.service }}
        mypy . --ignore-missing-imports
    
    - name: Run tests
      run: |
        cd trading-platform/services/${{ matrix.service }}
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: trading-platform/services/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      timescaledb:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_tsdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
      
      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: test
          RABBITMQ_DEFAULT_PASS: test
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd trading-platform/services/ai-engine
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run integration tests
      env:
        DB_HOST: localhost
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: test_db
        TSDB_HOST: localhost
        TSDB_USER: postgres
        TSDB_PASSWORD: postgres
        TSDB_NAME: test_tsdb
        RABBITMQ_HOST: localhost
        RABBITMQ_USER: test
        RABBITMQ_PASSWORD: test
        REDIS_HOST: localhost
      run: |
        cd trading-platform/services/ai-engine
        pytest tests/test_integration.py -v --cov=app --cov-report=xml

  build:
    runs-on: ubuntu-latest
    needs: [test, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push services
      run: |
        cd trading-platform
        
        # Build data-ingestion
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/data-ingestion:${{ github.sha }} ./services/data-ingestion
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/data-ingestion:${{ github.sha }}
        
        # Build ai-engine
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/ai-engine:${{ github.sha }} ./services/ai-engine
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/ai-engine:${{ github.sha }}
        
        # Build order-executor
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/order-executor:${{ github.sha }} ./services/order-executor
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/order-executor:${{ github.sha }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # TODO: Add staging deployment logic
        # - Update docker-compose with new image tags
        # - Deploy to staging server
        # - Run health checks

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # TODO: Add production deployment logic
        # - Update docker-compose with new image tags
        # - Deploy to production server
        # - Run health checks
        # - Update load balancer

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/ai-engine:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # TODO: Add performance testing logic
        # - Load testing with k6 or similar
        # - Benchmark AI model inference
        # - Test message queue throughput 